#!/usr/bin/env python3
# source  /grid/fermiapp/products/mu2e/setupmu2e-art.sh
# setup root v5_34_05 -qmu2e:e2:prof
# Run as: python3 MakeSource.py Source.root 0/1
# 0 - PS Only. Neutrons only
# 1 - Beam source. All particles, excluding neutrons, soft gammas and electrons

import ROOT
from ROOT import TFile, TTree, TH2F, TCanvas
from math import sqrt, fabs
import sys
import numpy as np

ROOT.gROOT.Reset()

def Run():

    if len(sys.argv) != 4:
        print("Usage: python MakeSource.py <finName> <ZNtuple> <nFout> (e.g. python MakeSource.py g4beamline.root Z500 10)\nExiting...")
        sys.exit(0)

    finName = sys.argv[1]
    ZNtuple = sys.argv[2] # Z3712
    nFout = int(sys.argv[3])

    # Extract the file name without extension and concatenate with "_ps.txt"
    foutName = finName.split("/")[-1][:-5] # + "_ps.txt"

    totEvents = 1e7 # finName.split("_")[2] 

    # Assuming the directory structure is "../ntuples/v3.06/g4beamline_Mu2E_1e5events.root"
    # Replace "ntuples" with "beamFiles" in the path
    foutName = finName.replace("/ntuples/", "/beamFiles/").replace("_fromSource", "").replace(".root", "") + "_" +ZNtuple+ "_bm.test"

    # Create a list of output files, if we're splitting them
    fout_ = []

    if nFout > 1: 
        fout_ = [open(f"{foutName}_{i}.txt", "w") for i in range(nFout)]
    else:
        fout_ = [open(f"{foutName}.txt", "w")]

    # f = open(foutName, "w")

    # Get inputs
    fin = TFile(finName)
    tree = fin.Get("/NTuple/"+ZNtuple)
    
    oldID = -999
    oldEV = -999

    # histo = TH2F("histo", "histo", int(1000), float(-10000), float(10000), int(10000), float(-10000), float(10000))

    print("The input source file:", finName)
    print("The output source file(s):")

    for fout in fout_:

        print(fout.name)

        fout.write("#BLTrackFile: Source file\n")
        # fout.write("#{:<12} {:<12} {:<12} {:<10} {:<10} {:<10} {:<12} {:<7} {:<10} {:<10} {:<9} {:<7}\n".format("x", "y", "z", "Px", "Py", "Pz", "t", "PDGid", "EventID", "TrackID", "ParentID", "TrackID"))
        fout.write("#{:<12} {:<12} {:<12} {:<10} {:<10} {:<10} {:<12} {:<7} {:<10} {:<10} {:<9} {:<7}\n".format("x", "y", "z", "Px", "Py", "Pz", "t", "PDGid", "EventID", "TrackID", "ParentID", "Weight"))
        fout.write("#{:<12} {:<12} {:<12} {:<10} {:<10} {:<10} {:<12} {:<7} {:<10} {:<10} {:<9} {:<7}\n".format("mm", "mm", "mm", "MeV/c", "MeV/c", "MeV/c", "ns", "ID", "ID", "ID", "ID", "ID"))

    # Split into 10 files for
    # dupeCount = 1

    for i in tree:

        # Determine which output file to write to based on the event ID
        fout_idx = int(i.EventID) % nFout # This doesn't work quite as I expect

        fout = fout_[fout_idx]

        if int(i.EventID) % 50000 == 0:
            print("Processing event: ", int(i.EventID))

        # Skip track if appears twice
        if lastEventID == int(i.EventID) and lastTrackID == int(i.TrackID):
           continue

        # For some reason this doesn't work... 
        # If you find a duplicate, create a new (unused) EventID 
        # if oldID == int(i.TrackID) and oldEV == int(i.EventID):
        #     print("\n---> Duplicate EventID:", oldEV, int(i.EventID))
        #     i.EventID = totEvents + dupeCount
        #     print("---> New EventID:", int(i.EventID))
        #     dupeCount += 1

        # Remove exotic particles. g4bl can"t handle them as the source
        # if int(i.PDGid) > 1000000:
        #     continue

        # Cut according to two bands seen in radius against momentum

        # rad = np.sqrt( pow(i.x, 2) + pow(i.y, 2))  
        # mom = np.sqrt( pow(i.Px, 2) + pow(i.Py, 2) + + pow(i.Pz, 2)) 

        # Define the function y = mx + c
        # m = 2 # gradient
        # b = 75 # x-intercept
        # c = -b*m

        # x = (rad - c) / m

        # Cut to the left or right of this line
        # if mom < x: continue
        # if mom > x: continue
            
        # # Select only neutrons in PS source
        # if int(i.PDGid) != 2112 and int(source) == 0:
        #     continue

        # Drop neutrons in beam source
        # if int(i.PDGid) == 2112: #  and int(source) == 1:
        #     continue

        # Drop visible and soft gammas in beam source
        # if int(i.PDGid) == 22 and sqrt(i.Px*i.Px + i.Py*i.Py + i.Pz*i.Pz) < 1.0:# and int(source) == 1:
        #     continue

        # Drop soft electrons in beam source
        # if fabs(int(i.PDGid)) == 11 and sqrt(i.Px*i.Px + i.Py*i.Py + i.Pz*i.Pz) < 10.0:# and int(source) == 1:
        #     continue

        # Drop thermal neutrons
        # if fabs(int(i.PDGid)) == 2112 and (sqrt(i.Px*i.Px + i.Py*i.Py + i.Pz*i.Pz + 939.565*939.565) - 939.565) < 1.0 and int(source) == 0:
        #     continue

        # Filter upstream protons 
        if int(i.PDGid) == 2212 and i.Pz < 0: 
            continue

        # Force all tracks to be primaries, otherwise g4bl will complain about large TrackIDs
        TrackID = int(i.TrackID)
        if int(i.TrackID) > 1000:
            TrackID = TrackID - 1000

        # print(TrackID)
        
        # Write event
        fout.write("{:<13.3f} {:<12.3f} {:<12.3f} {:<10.3f} {:<10.3f} {:<10.3f} {:<12.3f} {:<7} {:<10} {:<10} {:<7} {:<7}\n".format(i.x, i.y, i.z, i.Px, i.Py, i.Pz, i.t, int(i.PDGid), int(i.EventID), TrackID, 1, int(i.Weight)))

        oldID = int(i.TrackID)
        oldEV = int(i.EventID)


    fin.Close()

    for fout in fout_:
        fout.close()

if __name__ == "__main__":
   Run()
